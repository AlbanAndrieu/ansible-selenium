#!/bin/bash
# {{ ansible_managed }}
#
# /etc/init.d/selenium_{{selenium_sel_role}} -- startup script for selenium test server
#
### BEGIN INIT INFO
# Provides:          selenium_{{selenium_sel_role}}
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Selenium {{selenium_sel_role}}.
# Description:       Start the Selenium {{selenium_sel_role}} server.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME=selenium_{{ selenium_sel_role }}
DAEMON={{ selenium_server_path }}/{{ selenium_jar_file }}
DESC="Selenium test server {{ selenium_sel_role }}"
DEFAULT="/etc/default/${NAME}"
PID="/var/run/${NAME}.pid"
JVM_TMP="/var/tmp/${NAME}_app"
LOG_DIR="/var/log/${NAME}"

if [ ! -d "${LOG_DIR}" ]; then
    echo "${LOG_DIR} does not exists"
    mkdir ${LOG_DIR}
fi

if [ `id -u` -ne 0 ]; then
# no user change?
    echo "You need root privileges to run this script"
    exit 1
fi

test -x $DAEMON || exit 0

# Make sure it is started with system locale
if [ -r /etc/default/locale ]; then
    . /etc/default/locale
    export LANG
fi

. /lib/init/vars.sh
. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
    . /etc/default/rcS
fi

# overwrite settings with default file
if [ -f "${DEFAULT}" ]; then
    . "${DEFAULT}"
fi

# overridable defaults
#SE_USER=${SE_USER:-"nobody"}
#SE_GROUP=${SE_GROUP:-"nogroup"}
SE_USER=${SE_USER:-"root"}
SE_GROUP=${SE_GROUP:-"root"}
JAR_ARGS=${JAR_ARGS:-""}
JAVA_OPTS=${JAVA_OPTS:-""}

export DISPLAY=localhost:99.0

SYSTEM_JAVA=$(/usr/bin/update-alternatives --query java|grep Value|cut -f 2 -d":")
if [ -z "$JAVA_HOME" -a ! -z "${SYSTEM_JAVA}" ]; then
    JAVA_HOME=$(dirname "${SYSTEM_JAVA}")
    JAVA_HOME=${JAVA_HOME%/bin}
fi
export JAVA_HOME JAVA_TMP JAVA_OPTS

##################################################
# Check for JAVA_HOME
##################################################
if [ -z "$JAVA_HOME" ]; then
	log_failure_msg "Could not start $DESC because no Java Development Kit"
	log_failure_msg "(JDK) was found. Please download and install JDK 1.4 or higher and set"
	exit 0
fi

export JAVA="${JAVA_HOME}/bin/java"

#
# Function that starts the daemon/service
#
do_start()
{
    # Some validation
    if [ -z "$DISPLAY" ]; then
        log_failure_msg "no DISPLAY found - please set DISPLAY"
        exit 1
    fi

    #umask 022
    ## Clean JVM_TMP directory
    #if [ -d "$JVM_TMP" ]; then
    #    rm -rf "${JVM_TMP}" || {
    #        log_failure_msg "could not clean JVM temporary directory"
    #        exit 1
    #    }
    #fi
    #install -o ${SE_USER} -g ${SE_GROUP} -d ${JVM_TMP}

    if [ ! -z "${ROLE}" ]; then
        JAR_ARGS="-role ${ROLE}"
    fi
    if [ ! -z "${HUB}" ]; then
        JAR_ARGS="${JAR_ARGS} -hub ${HUB}"
    fi

    if [ ! -z "${PORT}" ]; then
        JAR_ARGS="${JAR_ARGS} -port ${PORT}"
    fi

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	#start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test > /dev/null \
	#	|| return 1
	#start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON -- \
	#	$DAEMON_OPTS 2>/dev/null \
	#	|| return 2
    #start-stop-daemon   --start \
    #                    --background \
    #                    --pidfile "${PID}" \
    #                    --make-pidfile \
    #                    --user "${SE_USER}" \
    #                    --group "${SE_GROUP}" \
    #                    --exec ${JAVA_HOME}/bin/java -- ${JAVA_OPTS} -jar {{ selenium_server_path }}/{{ selenium_jar_file }} ${JAR_ARGS} ${EXTRA_ARGS}  > ${LOG_DIR}/selenium.log 2> ${LOG_DIR}/error.log

	#SU=/bin/su
	#$SU -l $SE_USER --shell=/bin/bash -c "${JAVA} ${JAVA_OPTS} -jar {{ selenium_server_path }}/{{ selenium_jar_file }} ${JAR_ARGS} ${EXTRA_ARGS}" > ${LOG_DIR}/selenium.log 2> ${LOG_DIR}/error.log & echo $! > ${PID}
	${JAVA} ${JAVA_OPTS} -jar {{ selenium_server_path }}/{{ selenium_jar_file }} ${JAR_ARGS} ${EXTRA_ARGS} > ${LOG_DIR}/selenium.log 2> ${LOG_DIR}/error.log & echo $! > ${PID}

	sleep 5
	if start-stop-daemon --test --start --pidfile "$PID" \
		--user $SE_USER --startas "$JAVA" >/dev/null; then
		log_end_msg 1
	else
		log_end_msg 0
	fi

}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
    $0 status
    if [ $? -eq 0 ]; then
        start-stop-daemon   --stop \
                            --quiet \
                            --pidfile "${PID}" \
                            --retry=TERM/30/KILL/5
        rc=$?
        if [ $? -eq 0 ]; then
            if [ -f "${PID}" ]; then
                rm "${PID}"
            fi
            log_daemon_msg "${NAME} stopped"
        fi
	    sleep 1
        return ${rc}
    fi
}

#
# Function that give the daemon/service status
#
do_status()
{
	#start-stop-daemon --status --pidfile "${PID}" --name ${NAME}
	start-stop-daemon --status --pidfile "${PID}"
	rc=$?
	case $rc in
		0) msg="$NAME is running with pid: $( cat ${PID})." ;;
		1) msg="$NAME is not running but pid file exists." ;;
		3) msg="$NAME is not running.";;
		4) msg="Unable to determine status of ${NAME}";;
	esac
	log_daemon_msg $msg
	return ${rc}
}

case "$1" in
	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		#case "$?" in
		#	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		#	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		#esac
		;;
	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		#case "$?" in
		#	0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		#	2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		#esac
		;;
	status)
		[ "$VERBOSE" != no ] && log_daemon_msg "Status $DESC" "$NAME"
		do_status
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	version)
		echo "${NAME} {{ selenium_server_version }}"
		;;
	restart)
		$0 stop || true
		$0 start
		;;
	*)
		log_success_msg "Usage: $0 {start|stop|restart|status|version}"
		exit 1
		;;
esac
exit 0
